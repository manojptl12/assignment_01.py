71)What is File function in python? What are keywords to create
and write file

n Python, a file function refers to the use of functions or methods that allow you to interact with files. 
You can open, read, write, append, and close files using Python's built-in file handling functions.

Key File Functions in Python:
open(): Opens a file. It takes two main parameters:

1) The file name (or path).
The mode in which you want to open the file (e.g., read, write, append).

Syntax:
file_object = open("filename", "mode")
write(): Writes data to the file. Syntax:

2) file_object.write("content to write")
read(): Reads the content of the file. Syntax:

3) file_object.read()
close(): Closes the file. It’s important to close the file after finishing file operations to free up system
resources. Syntax:

4) file_object.close()
Keywords for File Operations:
When using the open() function, the second argument specifies the mode:

'r': Open a file for reading (default mode). If the file does not exist, it throws an error.
'w': Open a file for writing. It creates a new file if it does not exist, or truncates the file if it exists.
'a': Open a file for appending. Data is added to the end of the file. It creates a new file if it does not exist.
'x': Open a file for exclusive creation. If the file already exists, it raises an error.
'b': Opens a file in binary mode.
't': Opens a file in text mode (default mode).
'+': Open a file for updating (both reading and writing).

Example of Creating and Writing to a File:
# Open a file in write mode
file = open("example.txt", "w")

# Write content to the file
file.write("Hello, World!")

# Close the file
file.close()

In this example, the file "example.txt" is created (or overwritten if it already exists), and "Hello, World!" is 
written to it.


83)Explain Exception handling? What is an Error in Python? 

Exception Handling in Python

Exception handling is a mechanism in Python used to manage errors and exceptions that occur during the execution of
a program. When an error occurs, Python stops the normal flow of the program and generates an exception. If not handled,
the program will crash. Exception handling ensures that the program can continue its execution or fail gracefully by 
catching and responding to exceptions.

Common Syntax for Exception Handling
In Python, exceptions are handled using the try-except block:

try:
    # Code that may raise an exception
except SomeExceptionType:
    # Code to handle the exception
	
try block: This is where you put the code that might raise an exception.
except block: This catches the exception and allows the program to continue running without crashing. You can specify the
type of exception you want to catch (e.g., ValueError, TypeError), or catch all exceptions with a general except block.

else block (optional): If no exception occurs, the code inside the else block will be executed.
finally block (optional): The finally block always runs, whether an exception occurred or not, often used for clean-up tasks.

Example

try:
    number = int(input("Enter a number: "))  # May raise ValueError
    print(10 / number)  # May raise ZeroDivisionError
except ValueError:
    print("Invalid input. Please enter an integer.")
except ZeroDivisionError:
    print("You cannot divide by zero.")
else:
    print("No exceptions occurred.")
finally:
    print("End of exception handling.")
	
Errors in Python
An error in Python refers to a problem in the code that prevents the program from being executed successfully. Python has two
types of errors:

1] syntax Errors:
These occur when the Python parser encounters incorrect syntax.

Example:

print("Hello"
# SyntaxError: 
unexpected EOF while parsing

2] Exceptions (Runtime Errors):
These occur during the execution of a program, after the code has been successfully parsed.
Python raises an exception when it encounters an error, such as dividing by zero or trying to open a non-existent file.

Example:

print(10 / 0)
# ZeroDivisionError: division by zero

Some common Python exceptions include:

ValueError: Raised when a function receives an argument of the right type but inappropriate value.
TypeError: Raised when an operation or function is applied to an object of inappropriate type.
IndexError: Raised when trying to access an index that is out of range for a sequence.
KeyError: Raised when trying to access a dictionary key that doesn’t exist.

By handling exceptions, you ensure that the program doesn’t terminate unexpectedly and can respond appropriately when errors occur.



84)How many except statements can a try-except block have? Name
Some built-in exception classes:  	

Number of except Statements in a try-except Block

A try-except block can have multiple except statements. Each except statement can catch a different type of exception. 
There is no strict limit to the number of except blocks you can have. This allows handling different types of 
exceptions in different ways within the same block.

Example with Multiple except Statements:

try:
    # Code that might raise an exception
    number = int(input("Enter a number: "))
    result = 10 / number
except ValueError:
    print("This is not a valid integer.")
except ZeroDivisionError:
    print("You cannot divide by zero.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
	
In the example above, the except blocks handle:
ValueError for invalid integer inputs,
ZeroDivisionError for division by zero,
A general Exception block to catch any other unexpected exceptions.

Some Built-in Exception Classes in Python
Python provides several built-in exception classes, all of which inherit from the BaseException class.
 Here are some common ones:

Exception: The base class for most built-in exceptions.
ValueError: Raised when a function receives an argument of the correct type but inappropriate value.
TypeError: Raised when an operation or function is applied to an object of inappropriate type.
IndexError: Raised when a sequence (like a list) is accessed with an out-of-range index.
KeyError: Raised when a dictionary is accessed with a key that does not exist.
ZeroDivisionError: Raised when a division or modulo operation is attempted with zero as the divisor.
AttributeError: Raised when an invalid attribute reference or assignment is made.
FileNotFoundError: Raised when trying to open a file that does not exist.
IOError: Raised when an input/output operation fails (e.g., file handling errors).
ImportError: Raised when an import statement fails to import a module.
NameError: Raised when a variable or function name is not found in the local or global scope.
OverflowError: Raised when the result of an arithmetic operation is too large to be expressed within the allowable limits.
RuntimeError: Raised when an error is detected that doesn’t fall in any other category.
StopIteration: Raised to signal the end of an iterator (usually in loops).

These built-in exception classes allow Python developers to handle specific types of errors more efficiently.


85)When will the else part of try-except-else be executed?

The else part of a try-except-else block will be executed only if no exceptions are raised in the try block. 
If an exception is caught in the try block, the else block is skipped, and control moves to the appropriate 
except block (if any).

Execution Flow:
try block: The code inside this block is executed first.

If an exception occurs, the except block(s) is executed, and the else block is skipped.
If no exception occurs, the else block is executed.
except block(s): These blocks handle exceptions if they are raised in the try block.

else block: Executes only when the try block is completed successfully without raising any exceptions.

Example:
try:
    number = int(input("Enter a number: "))  # No exception raised here
    result = 10 / number  # No exception raised if number is not zero
except ValueError:
    print("Invalid input. Please enter a valid integer.")
except ZeroDivisionError:
    print("Division by zero is not allowed.")
else:
    print("The result is:", result)  # This runs only if no exception occurs
	
Case 1: 
If the user enters a valid number (not zero), the else block will execute:
Enter a number: 5
The result is: 2.0

Case 2: 
If an exception occurs (e.g., ValueError or ZeroDivisionError), the else block is skipped:
Enter a number: 0
Division by zero is not allowed.

In summary, the else block is used to execute code that should only run when the try block completes successfully without any exceptions.

85)When will the else part of try-except-else be executed?

The else part of a try-except-else block will be executed only if the code in the try block does not raise any exceptions. 
If an exception is raised in the try block, the else block is skipped, and the control moves to the except block.

In short, the else block runs when the try block completes successfully without any errors.


86)Can one block of except statements handle multiple exception? 

Yes, a single except block can handle multiple exceptions by specifying them as a tuple. 
If any of the specified exceptions occur, the code inside that except block will execute.

Syntax for Handling Multiple Exceptions in One Block:
try:
    # Code that may raise multiple exceptions
    number = int(input("Enter a number: "))
    result = 10 / number
	
except (ValueError, ZeroDivisionError):
    print("Either an invalid input or division by zero occurred.")
In this example, if a ValueError (for invalid input) or ZeroDivisionError (for division by zero) occurs, 
the same except block will handle both cases.

Example with More Detailed Handling:
try:
    # Code that may raise multiple exceptions
    number = int(input("Enter a number: "))
    result = 10 / number
except (ValueError, ZeroDivisionError) as e:
    print(f"An error occurred: {e}")
	
This way, multiple exceptions can be handled together with a single except statement.


87)When is the finally block executed?

The finally block is always executed, regardless of whether an exception occurs in the try block or not. It is used to perform cleanup actions, 
such as closing files or releasing resources, ensuring that the code within the finally block runs in any case.

If no exception occurs, the finally block is executed after the try block.
If an exception occurs, the finally block is executed after the except block.
If an exception isn't caught, the finally block is executed before the program terminates.

Example:
try:
    number = int(input("Enter a number: "))
    result = 10 / number
except ZeroDivisionError:
    print("Division by zero.")
finally:
    print("This will always be executed, regardless of an exception.")


88) What happens when "1" == 1 is executed?

When "1" == 1 is executed, False is returned. This is because:

"1" is a string (text enclosed in quotes), and
1 is an integer (a number).
In Python, the equality operator (==) checks both value and type. Since "1" (a string) and 1 (an integer) have different types,
they are not considered equal, hence the result is False.

Example:
print("1" == 1)  # Output: False


89)How Do You Handle Exceptions with Try/Except/Finally in Python?
Explain with coding snippets. 

In Python, exceptions are handled using the try, except, and finally blocks. The try block contains code that may 
raise an exception, the except block handles specific exceptions, and the finally block is used for cleanup actions that need to run no matter what, such as closing files or releasing resources.

General Structure:
try:
    # Code that might raise an exception
except SomeException:
    # Code to handle the exception
finally:
    # Code that will always run, whether an exception occurs or not
	
Example 1: Basic Exception Handling with finally
try:
    # Attempt to divide by zero
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero.")
finally:
    print("This block is executed no matter what.")
	
Output:
Cannot divide by zero.
This block is executed no matter what.
The try block raises a ZeroDivisionError.
The except block catches this error and prints a message.
The finally block is executed after the exception is handled, regardless of whether the exception occurred.

Example 2: Multiple Exceptions with finally
try:
    number = int(input("Enter a number: "))  # May raise ValueError
    result = 10 / number  # May raise ZeroDivisionError
except ValueError:
    print("This is not a valid integer.")
except ZeroDivisionError:
    print("You cannot divide by zero.")
finally:
    print("End of the program. Cleanup if needed.")
	
Scenario 1 (Valid input, no exceptions):
Enter a number: 5
End of the program. Cleanup if needed.

Scenario 2 (Invalid input, ValueError):
Enter a number: abc
This is not a valid integer.
End of the program. Cleanup if needed.

Scenario 3 (ZeroDivisionError):
Enter a number: 0
You cannot divide by zero.
End of the program. Cleanup if needed.

Example 3: Using finally for Resource Cleanup
In this example, we use the finally block to ensure a file is always closed, whether or not an exception occurs.
try:
    file = open("test.txt", "r")
    content = file.read()
    print(content)
except FileNotFoundError:
    print("File not found.")
finally:
    file.close()
    print("File is closed.")
	
	If the file exists, its content is printed.
If the file does not exist, a FileNotFoundError is raised and caught.
In both cases, the finally block ensures that the file is closed properly.

Key Points:
The try block is used to write code that may throw exceptions.
The except block catches and handles specific exceptions.
The finally block always executes, regardless of whether an exception was raised or not.
It's ideal for cleanup tasks, like closing files or releasing resources.